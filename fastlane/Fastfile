require 'json'

is_enterprise_app = false

def is_pull_request(github_context)
  return github_context["event"]["pull_request"] != nil 
end

def is_push(github_context)
  return github_context["event"]["commits"] != nil 
end

default_platform :ios

platform :ios do  

  before_all do |lane, options|
    # authenticate with apple account so all lanes are able to authenticate correctly
    # https://docs.fastlane.tools/app-store-connect-api/
    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT_B64"],
      is_key_content_base64: true,
      in_house: is_enterprise_app
    )
  end

  # example for main builds: `bundle exec fastlane android deploy_app version:1.0.0"`
  # example for develoment builds (pull request, push): `bundle exec fastlane deploy_app`  
  lane :deploy_app do |values| 
    # download provisioning profile/certs to be able to build and sign app. 
    # automatically creates new profile if new test devices have been added to account 
    sync_code_signing(
      type = "adhoc",
      force_for_new_devices = true,
      readonly = false 
    )

    new_app_version = values[:version] # default 
    is_main_build = new_app_version != nil && new_app_version != ""
    new_build_number = Time.now.to_i # make the build number always unique. we do this with time. 
    release_notes = ["app: Remote Habits iOS"]
    groups = ['development', 'QA'] # default - always send to these groups. 

    if is_main_build
      UI.message("Deploying a main build of app. Version: #{new_app_version}")

      groups.append("main-builds") 

      release_notes.append(
        "build type: main",
        "version: #{new_app_version}"
      )
    else 
      UI.message("Deploying a development build of app.")

      # github_context only provided for non main builds. only construct it here in this else case. 
      github_context = JSON.parse(ENV["GITHUB_CONTEXT"]) # json string

      if is_pull_request(github_context) 
        UI.message("I see this is a pull request. Build metadata will include helpful PR info.")

        pull_request_title = github_context["event"]["pull_request"]["title"]
        pull_request_number = github_context["event"]["pull_request"]["number"]
        source_branch = github_context["head_ref"]
        destination_branch = github_context["base_ref"]
        commit_hash = github_context["sha"][0..8]
        
        new_app_version = "PR.#{pull_request_number}.#{commit_hash}"

        release_notes.append(
          "build type: pull request",
          "title: #{pull_request_title} (#{pull_request_number})",
          "author: #{github_context["event"]["pull_request"]["user"]["login"]}",
          "source branch: #{source_branch}",
          "destination branch: #{destination_branch}",
          "commit hash: #{commit_hash}"
        )
      elsif is_push(github_context) 
        UI.message("I see this is a git commit push. Build metadata will include helpful commit info.")

        branch_name = github_context["event"]["ref"].split("/").last # getting the last part of `refs/heads/test-dump` is the branch name
        commit_hash = github_context["event"]["head_commit"]["id"][0..8] # the sha of the commit

        new_app_version = "#{branch_name}.#{commit_hash}" 

        release_notes.append(
          "build type: push",
          "message: #{github_context["event"]["head_commit"]["message"]}",
          "author: #{github_context["event"]["head_commit"]["committer"]["username"]}",
          "branch: #{branch_name}",
          "commit hash: #{commit_hash}"
        )
      end
    end 

    release_notes = release_notes.join("\n")
    groups = groups.join(", ")

    UI.important("Release notes:\n#{release_notes}")
    UI.important("New app version: #{new_app_version}")
    UI.important("App testing groups: #{groups}")

    set_info_plist_value(path: "./Remote Habits/Info.plist", key: "CFBundleVersion", value: new_build_number)
    set_info_plist_value(path: "./Remote Habits/Info.plist", key: "CFBundleShortVersionString", value: new_app_version)   

    build_ios_app(
      scheme: "Remote Habits",
      configuration: 'Release',
      export_method: 'ad-hoc'
    )

    upload_symbols_to_crashlytics(
      gsp_path: "Remote Habits/GoogleService-Info.plist"
    )   

    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      service_credentials_file: './firebase_appdistribution_service_account.json',
      groups: groups,
      release_notes: release_notes
    )       
  end
end 