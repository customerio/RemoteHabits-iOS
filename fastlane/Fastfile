require 'json'

is_enterprise_app = false

class GitHub 
  # `event` payload for pushes: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  # `event` payload for pull requests: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request

  def initialize(github_context)
    @github_context = github_context
  end 

  def is_push 
    @github_context["event"]["commits"] != nil 
  end 

  def is_pull_request
    @github_context["event"]["pull_request"] != nil 
  end 

  def commit_hash
    if is_push
      return @github_context["event"]["head_commit"]["id"][0..8]
    else 
      return @github_context["sha"][0..8]
    end    
  end

  def pr_title 
    @github_context["event"]["pull_request"]["title"]
  end 

  def pr_number
    @github_context["event"]["pull_request"]["number"]
  end 

  def source_branch
    @github_context["head_ref"]
  end 

  def destination_branch
    @github_context["base_ref"]
  end 

  def author 
    if is_push 
      return @github_context["event"]["head_commit"]["committer"]["username"]      
    else 
      return @github_context["event"]["pull_request"]["user"]["login"]
    end 
  end 

  def commit_message 
    @github_context["event"]["head_commit"]["message"]
  end 

  def branch_name 
    @github_context["event"]["ref"].split("/").last # getting the last part of `refs/heads/test-dump` is the branch name
  end 
end 

default_platform :ios

platform :ios do  

  before_all do |lane, options|
    if ENV['CI'] 
      setup_ci 

      # authenticate with apple account so all lanes are able to authenticate correctly
      # https://docs.fastlane.tools/app-store-connect-api/
      app_store_connect_api_key(
        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
        issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
        key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT_B64"],
        is_key_content_base64: true,
        in_house: is_enterprise_app
      )
    end
  end

  # example for main builds: `bundle exec fastlane android deploy_app version:1.0.0"`
  # example for develoment builds (pull request, push): `bundle exec fastlane deploy_app`  
  lane :deploy_app do |values| 
    # download provisioning profile/certs to be able to build and sign app. 
    # automatically creates new profile if new test devices have been added to account 
    sync_code_signing(
      type: "adhoc",
      force_for_new_devices: true,
      readonly: false 
    )

    new_app_version = values[:version] # default 
    is_main_build = new_app_version != nil && new_app_version != ""
    release_notes = ["app: Remote Habits iOS"]
    groups = ['development'] # default - always send to these groups. 

    github = GitHub.new(JSON.parse(ENV["GITHUB_CONTEXT"])) # context is a JSON string 
    new_build_number = github.commit_hash

    if is_main_build
      UI.message("Deploying a main build of app. Version: #{new_app_version}")

      groups.append("main-builds")       

      release_notes.append(
        "build type: main",
        "version: #{new_app_version}"
      )
    else 
      UI.message("Deploying a development build of app.")      

      # At first, we made a fancy app version string with branch name and other things but the version string is limited on the valid characters in it. 
      # therefore, we are using the commit hash as that's enough to identify the build. 
      

      if github.is_pull_request
        UI.message("I see this is a pull request. Build metadata will include helpful PR info.")

        groups.append("QA") 
        new_app_version = "pr.#{github.pr_number}"

        release_notes.append(
          "build type: pull request",
          "title: #{github.pr_title} (#{github.pr_number})",
          "author: #{github.author}",
          "source branch: #{github.source_branch}",
          "destination branch: #{github.destination_branch}"
        )
      elsif github.is_push
        UI.message("I see this is a git commit push. Build metadata will include helpful commit info.")

        new_app_version = "push.#{github.commit_hash}"

        release_notes.append(
          "build type: push",
          "message: #{github.commit_message}",
          "author: #{github.author}",
          "branch: #{github.branch_name}"
        )
      else 
        UI.message("This is not a pull request or push. Going to ignore the event.")        
        return 
      end
    end 

    release_notes.append(      
      "commit hash: #{github.commit_hash}",
      "build number: #{new_build_number}"
    )

    release_notes = release_notes.join("\n")
    groups = groups.join(", ")

    UI.important("Release notes:\n#{release_notes}")
    UI.important("New app version: #{new_app_version}")
    UI.important("App testing groups: #{groups}")

    set_info_plist_value(path: "./Remote Habits/Info.plist", key: "CFBundleVersion", value: new_build_number) # make sure unique build number to avoid clashing
    set_info_plist_value(path: "./Remote Habits/Info.plist", key: "CFBundleShortVersionString", value: new_app_version)

    if ENV["XCODE_VERSION"] != nil 
      xcode_select "/Applications/Xcode_#{ENV["XCODE_VERSION"]}.app"
    end 
    
    build_ios_app

    upload_symbols_to_crashlytics(
      gsp_path: "Remote Habits/GoogleService-Info.plist"
    )   

    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      service_credentials_file: './firebase_appdistribution_service_account.json',
      groups: groups,
      release_notes: release_notes
    )       
  end

  # download the latest code signing 
  lane :dev_setup do |values| 
    sync_code_signing(
      type: "development",
      readonly: true,
      api_key_path: 'app_store_connect_creds.json'
    )
  end 

  # update code signing for development. Usually called by lane `register_new_device`
  lane :update_dev_signing do |values| 
    sync_code_signing(
      type: "development",
      force_for_new_devices: true,
      readonly: false,
      api_key_path: 'app_store_connect_creds.json'
    )    
  end 

  # Run if you have a new device that you want to test with. 
  lane :register_new_device do |values|     
    device_udid = prompt(text: "First, enter your device's UDID (find it here: https://help.apple.com/xcode/mac/current/#/dev93ef696c6) => ")

    UI.message("Next, I need a description of the device to register. An example would be 'Dana iPhone 13 green' to describe the device and who uses it.")    
    device_name = prompt(text: "Enter a name for the device to register: ")

    UI.success("Device UDID => #{device_udid}")    
    UI.success("Device description => #{device_name}")

    continue = prompt(text: "Register the above device? [Ctrl+C to quit, otherwise press ENTER]")

    register_devices(
      devices: {
        device_name => device_udid
      },
      api_key_path: 'app_store_connect_creds.json'
    )

    UI.success("Device registered. Now, refreshing signing info.")
    update_dev_signing
  end 
end 